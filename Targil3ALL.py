# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11KFBE-vypB-p88skFwDrUaEylgzQwET-

# Ranit Zohar , 
#Aviah Miriam Yadler ,

#targil3

סעיף א משימה 1

Lazy evaluation
"""

import sys
import time
tic= time.time()
def func():
	L= range(10001)
	return L
g=func()

toc= time.time()
print((toc-tic)*1000)

sys.getsizeof(g)

"""not Lazy evaluation


"""

import sys
import time
tic= time.time()
def func():
  L=[]
  for i in range(10001):
	  L.append(i)
L1=func()

toc= time.time()
print((toc-tic)*1000)

sys.getsizeof(L1)

"""סעיף א משימה 2

Lazy evaluation
"""

import time
tic= time.time()
def func():
	L= range(10001)
	return L

g=(func() for k in range(5000))
L1=[]
for item in g:
	L1.append(item)

toc= time.time()
print((toc-tic)*1000)

sys.getsizeof(g)

type(L1)

"""not Lazy evaluation"""

import time
tic= time.time()
def func():
	L=[]
	for i in range(10001):
	  L.append(i)
	return L

returnL=func()
L1=[]
for i in range(5000):
	L1.append(returnL[i])

toc= time.time()
print((toc-tic)*1000)

sys.getsizeof(L1)

type(L1)

"""סעיף א משימה 3

Lazy evaluation
"""

import math
import time
tic= time.time()
def pow(L):
	sumAll=0
	while True:
		for i in L:
			sumAll+=math.pow(L[i], 2)
		yield sumAll

L1=range(10001)
gen=pow(L1)
next(gen)

toc= time.time()
print((toc-tic)*1000)

"""not Lazy evaluation"""

import math
import time
tic= time.time()

def pow(L):
  sumAll=0
  for i in L:
    sumAll+=math.pow(L[i], 2)
  return sumAll

L1=range(10001)
sumAll=pow(L1)
print(sumAll)

toc= time.time()
print((toc-tic)*1000)

"""סעיף ב-יתרון"""

import time
tic= time.time()
L=[]
i=0
while i<6:
  L.append(i)
  i+=1

toc= time.time()
print((toc-tic)*1000)

tic= time.time()
L1=range(6)

toc= time.time()
print((toc-tic)*1000)

"""The advantage we showed is the time to create a list, in Lazy evaluation takes less time

סעיף ג-חיסרון
"""

def func(start, finish, interval):
    while start< finish:
        yield start
        start += interval
        
a= func(2,10,1)

for i in a:
	print(i)

for i in a:
	print(i)

a= [2,3,4,4,6,7,8,9]

for i in a:
	print(i)

for i in a:
	print(i)

"""Disadvantage - overrides the values in a and then when we want to print them again it will not print

משימה ד

השימוש במבנה זה עוזר לנו בתכנות פונקציונאלי , למשל בקריאה לפונקציה עצלה היא מאפשרת לנו ליצור מערך נתונים אינסופי ולא נצטרך לשמור את הערכים החוזרים אלא אפשר לקרוא לפונקציות, בהתאם לתכונה של תכנות פונקציונאלי.
"""